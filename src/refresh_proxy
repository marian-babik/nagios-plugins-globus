#! /usr/bin/perl -w
#
# Nagios plugin for retrieving VOMS/grid proxy certificate
# Copyright (c) 2007 Emir Imamagic
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#
# Changes and Modifications
# =========================
# 15-May-2007 - Created;
#
# 29-May-2007 - Updates related to WLCG specification changes
#
# 11-Jan-2008 - Added wrapper for safe execution of shell commands
#
# 21-May-2008 - Added support for passwordless proxies 
#               (to be used with -Z)
#             - Added support for running probe on behalf of other user 
#               (useful when probe is runned by root)
#             - Added support for reporting result as passive check
#               result instead of standard output.
#
# 15-Sep-2008 - changed sgutils namespace
#
# 11-Mar-2009 - Reporting passive output moved to the sgutils.
#
# 28-Apr-2009 - Added cert and key for service certificate.
#
# 16-Dec-2009 - 1.7 Migrated to Apache 2.0 license
#
# 23-Aug-2010 - Migrated to Nagios::Plugin.

use strict;
use Nagios::Plugin;
use File::Copy;
use GridMon::sgutils qw($VONAME &checkProxy &processCommand);
use GridMon::Nagios qw(nagios_debug);
use No::Worries::Syslog qw(syslog_open);

$SIG{__WARN__} = \&No::Worries::Warn::handler;
$SIG{__DIE__}  = \&No::Worries::Die::handler;

syslog_open(ident => "refresh_proxy", facility => "user");
nagios_debug("started");

# Standard variables used in Nagios::Plugin constructor
use constant PROGNAME => "refresh_proxy";
use constant VERSION => '1.6';
use constant DESCRIPTION => 'Nagios plugin for retrieving VOMS/grid proxy certificate';
use constant EXTRA_DESC => "";
use constant LICENSE => 'This nagios plugin is free software, and comes with ABSOLUTELY NO WARRANTY.
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
   http://www.apache.org/licenses/LICENSE-2.0
Copyright 2009 Emir Imamagic';
use constant SHORTNAME => 'GridProxy-Get';
use constant USAGE => "usage: $0 [ -v ] \n";
use constant DEFAULT_PORT => 7512;
use constant DEFAULT_MYPROXY_USER => 'nagios';
use constant DEFAULT_CERT => '/etc/nagios/globus/hostcert.pem';
use constant DEFAULT_KEY => '/etc/nagios/globus/hostkey.pem';

my %COMMANDS;

sub processErrorOutput {
    my $res = shift;

    $res =~ s/^\s*\n//mg;
    $res =~ s/\n//g;

    return $res;
}

sub createMyProxy {
    my $command = shift;
    my $verbose = shift;

    my $state = OK;
    my $answer;
    my $res;

    print "COMMAND: $command\n" if ($verbose);

    ($state, $res) = processCommand ("$command 2>&1");

    if ($state == CRITICAL) {
        print "ERROR: proxy creation failed\n" if ($verbose);
        $answer = "Getting MyProxy credential failed: " . processErrorOutput($res);
    } elsif ($state == UNKNOWN) {
        $answer = $res;
    } else {
        $answer = "MyProxy credential retrieved. ";
        $res = undef;
    }
    return ($state, $answer, $res);
}

sub createVomsProxy {
    my $command = shift;
    my $verbose = shift;
    my $type = shift;

    my $state = OK;
    my $answer;
    my $res;

    print "COMMAND: $command\n" if ($verbose);
    ($state, $res) = processCommand ("$command 2>&1");

    if ($state == CRITICAL) {
        print "ERROR: VOMS proxy creation failed\n" if ($verbose);
        $answer = "Getting VOMS proxy failed: " . processErrorOutput($res);
    } elsif ($state == UNKNOWN) {
        $answer = $res;
    } else {
        $answer = "VOMS $type credential retrieved. ";
        $res = undef;
    }
    return ($state, $answer, $res);
}

sub reorderVomsProxy {
    my $file = shift;
    my $line;
    my $count = 0;
    my $buffer = "";
    
    my $status = OK;
    my $answer = "";

    umask 0177;
    
    unless (open STD, $file) {
        $answer = "Cannot open proxy file $file!\n";
        $status = CRITICAL;
        
        return ($answer, $status);
    }
    
    unless (open STD1, ">" . $file . $$) {
        $answer = "Cannot open temporary proxy file $file$$!\n";
        $status = CRITICAL;
        
        return ($answer, $status);
    }

    while ($line = <STD>) {
    if ($line =~ /-----BEGIN CERTIFICATE-----/) {
        $count++
    }

    if ($count == 3) {
        $buffer .= $line;
    } else {
        print STD1 $line;
    }
    }

    print STD1 $buffer;
    close STD1;
    
    close STD;
    
    `/bin/mv -f $file$$ $file 2>&1 > /dev/null`;
    if ($?) {
        $answer = "Cannot move temporary proxy file $file$$ to defined location $file!\n";
        $status = CRITICAL;
    }
    
    return ($status, "VOMS proxy reordered.");
}

sub printOutputClean {
    my $state = shift;
    my $answer = shift;
    my $res = shift;
    my $proxy = shift;
    my $plugin = shift;

    unlink($proxy) if ($proxy && -f $proxy);

    $plugin->nagios_exit($state, $answer);
}

# Local variables
my ($state,$answer,$res);
my ($timeoutanswer,$tmpAnswer,$myProxyUser,$proxyName,$proxyLifetime);
my ($proxyUID, $proxyGID, $tempProxy,$cmd);

# Create Nagios::Plugin instance
my $plugin = Nagios::Plugin->new (usage => USAGE,
                                  shortname => SHORTNAME,
                                  version => VERSION,
                                  blurb => DESCRIPTION,
                                  extra => EXTRA_DESC,
                                  license => LICENSE,
                                  plugin  => PROGNAME);
# Define additional arguments
$plugin->add_arg(
    spec => 'hostname|H=s',
    help => "Name or IP address of host to check.",
    required => 0,
    default => 'localhost'
);
$plugin->add_arg(
    spec => 'port|p=i',
    help => "Port of the service.\n   (default: ".DEFAULT_PORT.")",
    required => 0,
    default => DEFAULT_PORT
);
$plugin->add_arg(
    spec => 'proxy|x=s',
    help => "Location of Nagios user's proxy file.\n   (default: /tmp/x509up_u$<)",
    required => 0,
    default => "/tmp/x509up_u$<"
);
$plugin->add_arg(
    spec => 'vo=s',
    help => "Virtual organization of user.\n   (default: )",
    required => 0,
);
$plugin->add_arg(
    spec => 'vo-fqan=s',
    help => "VO FQAN of user.\n   (default: )",
    required => 0,
);
$plugin->add_arg(
    spec => 'cert=s',
    help => "Location of service certificate used to protect
   trusted MyProxy proxy.
   (default: ".DEFAULT_CERT.")",
    required => 0,
    default => DEFAULT_CERT
);
$plugin->add_arg(
    spec => 'key=s',
    help => "Location of service certificate key used to protect
   trusted MyProxy proxy.
   (default: ".DEFAULT_KEY.")",
    required => 0,
    default => DEFAULT_KEY
);
$plugin->add_arg(
    spec => 'robot-cert=s',
    help => "Location of a Robot certificate to use.  This option disables the
   use of MyProxy.\n   (default: not set, use MyProxy)",
    required => 0,
);
$plugin->add_arg(
    spec => 'robot-key=s',
    help => "Location of the key part of the Robot certificate.
   (default: same as --robot-cert).",
    required => 0,
);
$plugin->add_arg(
    spec => 'name=s',
    help => "Name of MyProxy credential to use.
   (Default: )",
    required => 0
);
$plugin->add_arg(
    spec => 'myproxyuser=s',
    help => "myproxyuser
   Name of MyProxy account under which the credential
   was stored.
   Probe uses MyProxy account (option -l) instead of user
   DNs (-d) because probe refresh the credential without
   knowing the DN of user certificate which was used for
   creating MyProxy credential.
   (Default: ".DEFAULT_MYPROXY_USER.")",
    required => 0,
    default => DEFAULT_MYPROXY_USER
);
$plugin->add_arg(
    spec => 'localuser=s',
    help => "localuser
   Generate proxy on behalf of defined user. This
   option is used if refresh_proxy retrieves proxy
   for another user (e.g. if executed by root).
   If not set proxy will be generated for the
   user running the probe.
   (Default: )",
    required => 0
);
$plugin->add_arg(
    spec => 'reorder',
    help => "If set, refresh_proxy will apply VOMS proxy reordering
    hack which solves following bug:
      https://savannah.cern.ch/bugs/?26260
    WARNING: using this option in combination with valid
    VOMS version will generate incorrect proxy certificate.
    (Default: not set)",
    required => 0
);
$plugin->add_arg(
    spec => 'lifetime=s',
    help => "lifetime
   Lifetime of generated proxy in hours.
   If using values > 12 hours please make 
   sure that MyProxy server is able to issue
   longer credentials. Otherwise the probe
   will fail.
   (Default: 12)",
    required => 0,
    default  => 12,
);
$plugin->add_arg(
    spec => 'bits|b=s',
    help => "Bits to use in voms-proxy-init.",
    required => 0,
    default => 2048
);
$plugin->add_arg(
    spec => 'voms3',
    help => "If set use voms-proxy-init3 (default: not set)",
    required => 0,
);


$plugin->getopts;

$myProxyUser = $plugin->opts->myproxyuser;
$proxyName = $plugin->opts->name;
$proxyLifetime = $plugin->opts->lifetime;
my $voProxyLifetime;

if ($proxyLifetime =~ /^\d+$/) {
    $voProxyLifetime = $proxyLifetime - 1;
    $voProxyLifetime = "${voProxyLifetime}:55";
} else {
    $plugin->nagios_die("Argument 'lifetime' must be a number!")
}

$VONAME = $plugin->opts->vo if ($plugin->opts->vo);
$VONAME .= ":".$plugin->opts->get('vo-fqan') if ($plugin->opts->get('vo-fqan'));

$ENV{'X509_USER_CERT'}=$plugin->opts->cert if ($plugin->opts->cert);
$ENV{'X509_USER_KEY'}=$plugin->opts->key if ($plugin->opts->key);

my $globusLocation = $ENV{GLOBUS_LOCATION} || "/usr";
$COMMANDS{MY_PROXY_LOGON}  = "$globusLocation/bin/myproxy-logon";
$globusLocation = $ENV{GLITE_LOCATION} || "/usr";
$COMMANDS{VOMS_PROXY_INIT} = "$globusLocation/bin/voms-proxy-init";
$COMMANDS{VOMS_PROXY_INFO} = "$globusLocation/bin/voms-proxy-info";
if ($plugin->opts->voms3) {
    $COMMANDS{VOMS_PROXY_INIT} = "$globusLocation/bin/voms-proxy-init3";
}


# Just in case of problems, let's not hang Nagios
local $SIG{ALRM} = sub {
    local $SIG{TERM} = 'IGNORE';
    kill TERM => -$$;
    printOutputClean(CRITICAL, $timeoutanswer,'',$tempProxy,$plugin);
};

local $SIG{TERM} = sub {
    local $SIG{TERM} = 'IGNORE';
    kill TERM => -$$;
    printOutputClean(UNKNOWN, "Plugin received TERM signal.",'',$tempProxy,$plugin);
};

alarm($plugin->opts->timeout);

##### Main program

if ($plugin->opts->localuser) {
    my ($user1,$pass1);
    unless (($user1,$pass1,$proxyUID,$proxyGID) = getpwnam($plugin->opts->localuser)) {
        $plugin->nagios_die("User ".$plugin->opts->localuser." doesn't exist on system.");
    }
}

$tempProxy = $plugin->opts->proxy."_$$";

$ENV{X509_USER_PROXY} = $tempProxy;

my @type;

if ($plugin->opts->get('robot-cert')) {
    my $robotCert = $plugin->opts->get('robot-cert');
    my $robotKey = $plugin->opts->get('robot-key') || $robotCert;
    $ENV{X509_USER_CERT} = $robotCert;
    $ENV{X509_USER_KEY} = $robotKey;
    $cmd = "$COMMANDS{VOMS_PROXY_INIT} --rfc --out $tempProxy --voms $VONAME --valid $voProxyLifetime";
    @type = ('--rfc', 'RFC');
}
else {
    $timeoutanswer = "Timeout occured during MyProxy operation.";
    $cmd = "$COMMANDS{MY_PROXY_LOGON} -l $myProxyUser -s ".$plugin->opts->hostname." -p ".$plugin->opts->port." -o $tempProxy -t $proxyLifetime";
    $cmd .= " -k $proxyName" if ($proxyName);
    $cmd .= " -n";

    ($state,$answer,$res) = createMyProxy($cmd, $plugin->opts->verbose);
    if ( $state != OK) {
	$answer .= " Keeping existing proxy.\n";
	printOutputClean ($state,$answer,$res, $tempProxy, $plugin);
    }

    my $tmpType = `$COMMANDS{VOMS_PROXY_INFO} --file $tempProxy --type`;
    @type = ($tmpType =~ /rfc/i) ? ('--rfc', 'RFC') : ('--old', 'legacy');
    my $bits = $plugin->opts->get('bits');

    # this is needed in case when user is root
    # otherwise voms-proxy-init doesn't work
    $ENV{X509_USER_CERT} = $tempProxy;
    $ENV{X509_USER_KEY} = $tempProxy;
    $cmd = "$COMMANDS{VOMS_PROXY_INIT} -b $bits --out $tempProxy --voms $VONAME --noregen --valid $voProxyLifetime $type[0]";
}

$timeoutanswer = "Timeout occured during VOMS proxy init operation.";

($state,$tmpAnswer,$res) = createVomsProxy($cmd, $plugin->opts->verbose, $type[1]);
$answer .= $tmpAnswer if ($tmpAnswer);
if ( $state != OK) {
    $answer .= " Keeping existing proxy.\n";
    printOutputClean ($state,$answer,$res,$tempProxy,$plugin);
}

if ($plugin->opts->reorder) {
    $timeoutanswer = "Timeout occured during VOMS reordering.";
    ($state,$tmpAnswer,$res) = reorderVomsProxy($tempProxy);
    $answer .= $tmpAnswer if ($tmpAnswer);
}

if ($plugin->opts->localuser) {
    $timeoutanswer = "Timeout occured during proxy ownership change.";
    unless (chown $proxyUID, $proxyGID, $tempProxy) {
        $answer .= " Failed to change proxy ownership. Keeping existing proxy.";
        printOutputClean (CRITICAL,$answer,$res,$tempProxy,$plugin);
    }
}

$timeoutanswer = "Timeout occured during proxy move operation.";
$plugin->nagios_die("Error storying generated proxy to file: ". $plugin->opts->proxy)
    unless(move($tempProxy,$plugin->opts->proxy));

alarm(0);

$plugin->nagios_exit($state,$answer);
